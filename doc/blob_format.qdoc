\section introduction Introduction

Eblob is an append-only low-level IO library that stores data in blob files. Each blob is accompanied by index file.
Blob file has the name "{config.file}-0.{blob number}" where {config.file} is the path specified in eblob config and
{blob number} is an incremental index of the blob. Blob file stores entries with user data.
Index file has the name "{config.file}-0.{blob_number}.index" and stores only headers of entries from corresponding blob.
Index sort process sorts index file and save it into "{config.file}-0.{blob_number}.index.sorted" file
and removes original index file.
Data sort process sorts blob and index files, saves sorted index into "{config.file}-0.{blob_number}.index.sorted" file,
sorted blob into "{config.file}-0.{blob number}" file and creates empty "{config.file}-0.{blob_number}.data_is_sorted" file.
If blob has sorted and unsorted index files eblob will use sorted one and will remove unsorted one.

\section index_file_format Index file format

Index file stores headers of entries from corresponding blob. All headers have fixed size and follow each other without any separators.
Each header is an object of eblob_disk_control structure and contains information about the entry: key, position, size, flags etc.
When eblob writes data, it appends data with header and footer into a blob file and appends header into the index file.

\section blob_file_format Blob file format

Blob file stores entries. Each entry consists of:
* header - the same as header from index file
* user data
* footer - checksums that are used for data verification
All entries follow each other without any separators.

\section data_verificatoin Data verification

Eblob checksums data by chunked MurmurHash64A, which includes:
* splitting data into chunks by size (1M bytes)
* calculating checksum (MurmurHash64A) of each chunk
* calculating final checksum (MurmurHash64A) of all checksums calculated in the previous step
* writing checksums of all chunks and final checksum into the footer
Eblob calculates and writes checksums only at commit time when whole entry has already been written.
When eblob verifies data it computes checksums of requested chunks and compares them with checksums from the footer.

Records that were written by eblob version <= 0.22.23 are checksummed by sha512 method - their footer stores sha512 of data.
For compatibility purposes, eblob supports verification of such records, but all new records will be checksummed by chunked MurmurHash64A method.
To determine how record was checksummed, all records checksummed by chunked MurmurHash64A method have BLOB_DISK_CTL_CHUNKED_CSUM flag.
All records without such flag are verified by sha512.
If eblob is configured with EBLOB_NO_FOOTER flag or the record has BLOB_DISK_CTL_NOCSUM flag, verification of this record will be skipped.
